name: Early Access

on:
  push:
    branches: [ master ]
env:
  JAVA_VERSION: '17'
  JAVA_DISTRO: 'zulu'
  MVN_VERSION: '3.8.4'

jobs:
  precheck:
    if: startsWith(github.event.head_commit.message, 'Releasing version') != true
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.vars.outputs.VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - uses: n1hility/cancel-previous-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Maven
        uses: stCarolas/setup-maven@v4
        with:
          maven-version: ${{ env.MVN_VERSION }}

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Version
        id: vars
        shell: bash
        run: |
          version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo ::set-output name=VERSION::$(echo "$version")

  build:
    needs: [precheck]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    name: 'Build ${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: JReleaser assemble
        run: ./mvnw --no-transfer-progress -Passemble package -DskipTests -Dsigning.key.user.name=${{secrets.SIGNING_USER_NAME}}

      - name: Notarize Release Build
        if: ${{ runner.os == 'macOS' }}
        uses: erwin1/xcode-notarize@main
        with:
          product-path: target/jreleaser/assemble/jfxcentral/jpackage/jfxcentral-1.0.0.dmg
          appstore-connect-username: ${{ secrets.NOTARIZATION_USERNAME }}
          appstore-connect-password: ${{ secrets.NOTARIZATION_PASSWORD }}
          primary-bundle-id: com.dlsc.jfxcentral
          asc-provider: dlemmermann@mac.com
          verbose: true

      - name: JReleaser assemble output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          retention-days: 10
          name: assemble-${{ matrix.os }}
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties

      - name: Upload installers
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            target/jreleaser/assemble/jfxcentral/jpackage/*.dmg
            target/jreleaser/assemble/jfxcentral/jpackage/*.pkg
            target/jreleaser/assemble/jfxcentral/jpackage/*.msi
            target/jreleaser/assemble/jfxcentral/jpackage/*.deb
            target/jreleaser/assemble/jfxcentral/jpackage/*.rpm

  web:
    needs: [precheck]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build
        run: ./mvnw --no-transfer-progress -B install --file pom.xml

      - name: JPro
        run: ./mvnw --no-transfer-progress -B jpro:release --file pom.xml -Pjpro

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          retention-days: 10
          path: target/jfxcentral-jpro.zip

  early-access:
    needs: [precheck, build, web]
    if: endsWith(${{ needs.precheck.outputs.VERSION }}, '-SNAPSHOT')
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v2

      - name: Display downloaded artifacts
        run: ls -R artifacts

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Release with JReleaser
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./mvnw --no-transfer-progress -B -Prelease

      - name: JReleaser output
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: |
            target/jreleaser/trace.log
            target/jreleaser/output.properties
